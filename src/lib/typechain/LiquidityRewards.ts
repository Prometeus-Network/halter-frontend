/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LiquidityRewardsInterface extends ethers.utils.Interface {
  functions: {
    "claimRewards(uint256,bool)": FunctionFragment;
    "createRewardPool(address,uint256,uint256,uint256)": FunctionFragment;
    "depositLPT(uint256,uint256)": FunctionFragment;
    "finalDirtyRewardsRegister(address,uint256,uint256)": FunctionFragment;
    "finalFalseRewardsRegister(address,uint256,uint256)": FunctionFragment;
    "getClaimableVestedRewardsForSpecificPool(uint256)": FunctionFragment;
    "getTotalClaimableVestedRewards()": FunctionFragment;
    "getTotalRewardsAfterVestingForAllPools()": FunctionFragment;
    "isTokenAdded(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolPidByAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservoir()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userPoolInfo(address,uint256)": FunctionFragment;
    "withdrawLPT(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createRewardPool",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLPT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalDirtyRewardsRegister",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalFalseRewardsRegister",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableVestedRewardsForSpecificPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimableVestedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardsAfterVestingForAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAdded",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPidByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reservoir", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userPoolInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPT",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositLPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalDirtyRewardsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalFalseRewardsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableVestedRewardsForSpecificPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimableVestedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardsAfterVestingForAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolPidByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reservoir", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPT",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,uint256,uint256)": EventFragment;
    "Deposited(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber; penaltyReward: BigNumber }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PoolCreatedEvent = TypedEvent<
  [string, BigNumber],
  { token: string; pid: BigNumber }
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  { user: string; pid: BigNumber; amount: BigNumber; leftBeforeEnd: boolean }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface LiquidityRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      _pid: BigNumberish,
      _onlyVested: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createRewardPool(
      _token: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalDirtyRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        unlockTime: BigNumber;
        startTime: BigNumber;
      }
    >;

    finalFalseRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startTime: BigNumber }
    >;

    getClaimableVestedRewardsForSpecificPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getTotalClaimableVestedRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getTotalRewardsAfterVestingForAllPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalReward: BigNumber }>;

    isTokenAdded(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        startTime: BigNumber;
        endTime: BigNumber;
        rewardRate: BigNumber;
        totalPendingRewards: BigNumber;
        stakedAmount: BigNumber;
      }
    >;

    poolPidByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservoir(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userPoolInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stakedAmountLPT: BigNumber;
        claimedRewards: BigNumber;
      }
    >;

    withdrawLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    _pid: BigNumberish,
    _onlyVested: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createRewardPool(
    _token: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLPT(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalDirtyRewardsRegister(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      unlockTime: BigNumber;
      startTime: BigNumber;
    }
  >;

  finalFalseRewardsRegister(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startTime: BigNumber }
  >;

  getClaimableVestedRewardsForSpecificPool(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalClaimableVestedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalRewardsAfterVestingForAllPools(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTokenAdded(_token: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      startTime: BigNumber;
      endTime: BigNumber;
      rewardRate: BigNumber;
      totalPendingRewards: BigNumber;
      stakedAmount: BigNumber;
    }
  >;

  poolPidByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservoir(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userPoolInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      stakedAmountLPT: BigNumber;
      claimedRewards: BigNumber;
    }
  >;

  withdrawLPT(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      _pid: BigNumberish,
      _onlyVested: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createRewardPool(
      _token: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalDirtyRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        unlockTime: BigNumber;
        startTime: BigNumber;
      }
    >;

    finalFalseRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startTime: BigNumber }
    >;

    getClaimableVestedRewardsForSpecificPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalClaimableVestedRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewardsAfterVestingForAllPools(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAdded(_token: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        startTime: BigNumber;
        endTime: BigNumber;
        rewardRate: BigNumber;
        totalPendingRewards: BigNumber;
        stakedAmount: BigNumber;
      }
    >;

    poolPidByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservoir(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userPoolInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stakedAmountLPT: BigNumber;
        claimedRewards: BigNumber;
      }
    >;

    withdrawLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claimed(address,uint256,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      penaltyReward?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      penaltyReward?: null
    ): ClaimedEventFilter;

    "Deposited(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolCreated(address,uint256)"(
      token?: string | null,
      pid?: BigNumberish | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      token?: string | null,
      pid?: BigNumberish | null
    ): PoolCreatedEventFilter;

    "Withdrawn(address,uint256,uint256,bool)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      leftBeforeEnd?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      leftBeforeEnd?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    claimRewards(
      _pid: BigNumberish,
      _onlyVested: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createRewardPool(
      _token: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalDirtyRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalFalseRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableVestedRewardsForSpecificPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalClaimableVestedRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewardsAfterVestingForAllPools(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAdded(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolPidByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservoir(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userPoolInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      _pid: BigNumberish,
      _onlyVested: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createRewardPool(
      _token: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalDirtyRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalFalseRewardsRegister(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableVestedRewardsForSpecificPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalClaimableVestedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewardsAfterVestingForAllPools(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAdded(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolPidByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservoir(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userPoolInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLPT(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
